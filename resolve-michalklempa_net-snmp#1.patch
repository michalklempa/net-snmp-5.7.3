From 1224630cf633a9b2fdaaa06809a6829addaf5b4c Mon Sep 17 00:00:00 2001
From: Michal Klempa <michal.klempa@ideata.eu>
Date: Thu, 18 Feb 2016 09:19:30 +0100
Subject: [PATCH 1/4] snmptable is able to process multiple tables at same time

---
 apps/snmptable.c | 144 +++++++++++++++++++++++++++++--------------------------
 1 file changed, 76 insertions(+), 68 deletions(-)

diff --git a/apps/snmptable.c b/apps/snmptable.c
index c9c7d26..112715f 100644
--- a/apps/snmptable.c
+++ b/apps/snmptable.c
@@ -13,8 +13,8 @@
 
                       All Rights Reserved
 
-Permission to use, copy, modify, and distribute this software and its 
-documentation for any purpose and without fee is hereby granted, 
+Permission to use, copy, modify, and distribute this software and its
+documentation for any purpose and without fee is hereby granted,
 provided that the above copyright notice appear in all copies.
 
 I DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
@@ -120,7 +120,7 @@ optProc(int argc, char *const *argv, int opt)
 			max_width = atoi(argv[optind]);
 			if (max_width == 0) {
 			    usage();
-			    fprintf(stderr, "Bad -Cw option: %s\n", 
+			    fprintf(stderr, "Bad -Cw option: %s\n",
 				    argv[optind]);
 			    exit(1);
 			}
@@ -138,7 +138,7 @@ optProc(int argc, char *const *argv, int opt)
 			column_width = atoi(argv[optind]);
 			if (column_width <= 2) {
 			    usage();
-			    fprintf(stderr, "Bad -Cc option: %s\n", 
+			    fprintf(stderr, "Bad -Cc option: %s\n",
 				    argv[optind]);
 			    exit(1);
 			}
@@ -186,7 +186,7 @@ optProc(int argc, char *const *argv, int opt)
 			max_getbulk = atoi(argv[optind]);
 			if (max_getbulk == 0) {
 			    usage();
-			    fprintf(stderr, "Bad -Cr option: %s\n", 
+			    fprintf(stderr, "Bad -Cr option: %s\n",
 				    argv[optind]);
 			    exit(1);
 			}
@@ -252,7 +252,7 @@ main(int argc, char *argv[])
 
     netsnmp_set_line_buffering(stdout);
 
-    netsnmp_ds_set_boolean(NETSNMP_DS_LIBRARY_ID, 
+    netsnmp_ds_set_boolean(NETSNMP_DS_LIBRARY_ID,
                            NETSNMP_DS_LIB_QUICK_PRINT, 1);
 
     /*
@@ -270,89 +270,97 @@ main(int argc, char *argv[])
         break;
     }
 
+    SOCK_STARTUP;
+    ss = snmp_open(&session);
     /*
      * get the initial object and subtree 
      */
     /*
      * specified on the command line 
      */
-    if (optind + 1 != argc) {
-        fprintf(stderr, "Must have exactly one table name\n");
-        usage();
-        exit(1);
-    }
-
-    rootlen = MAX_OID_LEN;
-    if (!snmp_parse_oid(argv[optind], root, &rootlen)) {
-        snmp_perror(argv[optind]);
-        exit(1);
-    }
-    localdebug = netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID, 
-                                        NETSNMP_DS_LIB_DUMP_PACKET);
+    for (;; optind++) {
+        if (optind == argc) {
+            break;
+        }
+        for (int i = 0; i < MAX_OID_LEN; i++) {
+            root[i] = 0;
+            name[i] = 0;
+        }
+        rootlen = MAX_OID_LEN;
+        if (!snmp_parse_oid(argv[optind], root, &rootlen)) {
+            snmp_perror(argv[optind]);
+            exit(1);
+        }
+        localdebug = netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID,
+        NETSNMP_DS_LIB_DUMP_PACKET);
 
-    get_field_names();
-    reverse_fields();
+        get_field_names();
+        reverse_fields();
 
-    /*
-     * open an SNMP session 
-     */
-    SOCK_STARTUP;
-    ss = snmp_open(&session);
-    if (ss == NULL) {
         /*
-         * diagnose snmp_open errors with the input netsnmp_session pointer 
+         * open an SNMP session
          */
-        snmp_sess_perror("snmptable", &session);
-        SOCK_CLEANUP;
-        exit(1);
-    }
+        if (ss == NULL) {
+            /*
+             * diagnose snmp_open errors with the input netsnmp_session pointer
+             */
+            snmp_sess_perror("snmptable", &session);
+            SOCK_CLEANUP;
+            exit(1);
+        }
 
 #ifndef NETSNMP_DISABLE_SNMPV1
-    if (ss->version == SNMP_VERSION_1)
-        use_getbulk = 0;
+        if (ss->version == SNMP_VERSION_1)
+            use_getbulk = 0;
 #endif
 
-    do {
-        entries = 0;
-        allocated = 0;
-        if (!headers_only) {
-            if (use_getbulk)
-                getbulk_table_entries(ss);
-            else
-                get_table_entries(ss);
-        }
+        do {
+            entries = 0;
+            allocated = 0;
+            if (!headers_only) {
+                if (use_getbulk)
+                    getbulk_table_entries(ss);
+                else
+                    get_table_entries(ss);
+            }
 
-        if (exitval) {
-            snmp_close(ss);
-            SOCK_CLEANUP;
-            return exitval;
-        }
+            if (exitval) {
+                snmp_close(ss);
+                SOCK_CLEANUP;
+                return exitval;
+            }
 
-        if (entries || headers_only)
-            print_table();
+            if (entries || headers_only)
+                print_table();
 
-        if (data) {
-            free (data);
-            data = NULL;
-        }
+            if (data) {
+                free(data);
+                data = NULL;
+            }
 
-        if (indices) {
-            free (indices);
-            indices = NULL;
-        }
+            if (indices) {
+                free(indices);
+                indices = NULL;
+            }
 
-        total_entries += entries;
+            if (column) {
+                free(column);
+                column = NULL;
+            }
+
+            total_entries += entries;
 
-    } while (!end_of_table);
+        } while (!end_of_table);
 
+        if (total_entries == 0)
+            printf("%s: No entries\n", table_name);
+        if (extra_columns)
+            printf("%s: WARNING: More columns on agent than in MIB\n",
+                    table_name);
+    }
     snmp_close(ss);
     SOCK_CLEANUP;
 
-    if (total_entries == 0)
-        printf("%s: No entries\n", table_name);
-    if (extra_columns)
-	printf("%s: WARNING: More columns on agent than in MIB\n", table_name);
-
     return 0;
 }
 
@@ -363,7 +371,7 @@ print_table(void)
     char          **dp;
     char            string_buf[SPRINT_MAX_LEN];
     char           *index_fmt = NULL;
-    static int      first_pass = 1;
+    int      first_pass = 1;
 
     if (!no_headers && !headers_only && first_pass)
         printf("SNMP table: %s\n\n", table_name);
@@ -698,7 +706,7 @@ get_table_entries(netsnmp_session * ss)
                         }
                         i = vars->name_length - rootlen + 1;
                         if (localdebug || show_index) {
-                            if (netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID, 
+                            if (netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID,
                                               NETSNMP_DS_LIB_EXTENDED_INDEX)) {
                                 name_p = strchr(buf, '[');
                             } else {
@@ -874,7 +882,7 @@ getbulk_table_entries(netsnmp_session * ss)
 			vars = vars->next_variable;
 			continue;
 		    }
-                    if (netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID, 
+                    if (netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID,
                                               NETSNMP_DS_LIB_EXTENDED_INDEX)) {
                         name_p = strchr(buf, '[');
                     } else {
-- 
2.5.0


From bdaf76644619d86fa958ab04c1601afbc269aeed Mon Sep 17 00:00:00 2001
From: Michal Klempa <michal.klempa@gmail.com>
Date: Thu, 18 Feb 2016 12:26:27 +0100
Subject: [PATCH 2/4] Resolve #1 documentation

---
 apps/snmptable.c    | 2 +-
 man/snmptable.1.def | 5 +++--
 2 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/apps/snmptable.c b/apps/snmptable.c
index 112715f..f7b3bbc 100644
--- a/apps/snmptable.c
+++ b/apps/snmptable.c
@@ -213,7 +213,7 @@ usage(void)
 {
     fprintf(stderr, "USAGE: snmptable ");
     snmp_parse_args_usage(stderr);
-    fprintf(stderr, " TABLE-OID\n\n");
+    fprintf(stderr, " TABLE-OID [TABLE-OID] [TABLE-OID] [...]\n\n");
     snmp_parse_args_descriptions(stderr);
     fprintf(stderr,
 	    "  -C APPOPTS\t\tSet various application specific behaviours:\n");
diff --git a/man/snmptable.1.def b/man/snmptable.1.def
index 4e65cb4..7f00684 100644
--- a/man/snmptable.1.def
+++ b/man/snmptable.1.def
@@ -26,12 +26,13 @@ snmptable - retrieve an SNMP table and display it in tabular form
 .SH SYNOPSIS
 .B snmptable
 [COMMON OPTIONS] [\-Cb] [\-CB] [\-Ch] [\-CH] [\-Ci] [\-Cf STRING] [\-Cw WIDTH]
-AGENT TABLE\-OID
+AGENT TABLE\-OID [TABLE\-OID] [TABLE\-OID] [...] 
 .SH DESCRIPTION
 .B snmptable
 is an SNMP application that repeatedly uses the SNMP GETNEXT or
 GETBULK requests to query for information on a network entity.  The
-parameter TABLE\-OID must specify an SNMP table.
+parameter TABLE\-OID must specify an SNMP table. User has a possibility
+to supply multiple TABLE\-OIDs, these are collected one-by-one.
 
 AGENT identifies a target SNMP agent, which is instrumented
 to monitor the given objects.  At its simplest, the AGENT
-- 
2.5.0


From ce96f46d4a4238a8f34b3707fdafa711335c4476 Mon Sep 17 00:00:00 2001
From: Michal Klempa <michal.klempa@ideata.eu>
Date: Thu, 18 Feb 2016 13:17:30 +0100
Subject: [PATCH 3/4] Resolve
 https://github.com/michalklempa/net-snmp-5.7.3/commit/1224630cf633a9b2fdaaa06809a6829addaf5b4c#commitcomment-16173762

---
 apps/snmptable.c | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/apps/snmptable.c b/apps/snmptable.c
index f7b3bbc..39e4e54 100644
--- a/apps/snmptable.c
+++ b/apps/snmptable.c
@@ -273,6 +273,18 @@ main(int argc, char *argv[])
     SOCK_STARTUP;
     ss = snmp_open(&session);
     /*
+     * open an SNMP session
+     */
+    if (ss == NULL) {
+        /*
+         * diagnose snmp_open errors with the input netsnmp_session pointer
+         */
+        snmp_sess_perror("snmptable", &session);
+        SOCK_CLEANUP;
+        exit(1);
+    }
+
+    /*
      * get the initial object and subtree 
      */
     /*
@@ -297,18 +309,6 @@ main(int argc, char *argv[])
         get_field_names();
         reverse_fields();
 
-        /*
-         * open an SNMP session
-         */
-        if (ss == NULL) {
-            /*
-             * diagnose snmp_open errors with the input netsnmp_session pointer
-             */
-            snmp_sess_perror("snmptable", &session);
-            SOCK_CLEANUP;
-            exit(1);
-        }
-
 #ifndef NETSNMP_DISABLE_SNMPV1
         if (ss->version == SNMP_VERSION_1)
             use_getbulk = 0;
-- 
2.5.0


From 2466a493a62ec8a3ca65b20784cc92fdf30f53b6 Mon Sep 17 00:00:00 2001
From: Michal Klempa <michal.klempa@ideata.eu>
Date: Thu, 18 Feb 2016 13:18:52 +0100
Subject: [PATCH 4/4] Resolve
 https://github.com/michalklempa/net-snmp-5.7.3/commit/1224630cf633a9b2fdaaa06809a6829addaf5b4c#commitcomment-16173759

---
 apps/snmptable.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/apps/snmptable.c b/apps/snmptable.c
index 39e4e54..b6aa041 100644
--- a/apps/snmptable.c
+++ b/apps/snmptable.c
@@ -301,6 +301,8 @@ main(int argc, char *argv[])
         rootlen = MAX_OID_LEN;
         if (!snmp_parse_oid(argv[optind], root, &rootlen)) {
             snmp_perror(argv[optind]);
+            snmp_close(ss);
+            SOCK_CLEANUP;
             exit(1);
         }
         localdebug = netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID,
-- 
2.5.0

